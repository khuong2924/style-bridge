version: '3.8'

services:
  traefik:
    image: traefik:v3.3
    container_name: traefik
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8090:8080" 
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--providers.docker.network=app-net"
      - "--providers.docker.watch=true"  
      - "--providers.docker.defaultrule=Host(`localhost`)"
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "--tries=1", "http://localhost:8080/api/version"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 15s

  db1:
    image: postgres:15
    container_name: db1
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=midterm-domain1
    ports:
      - "5434:5432"  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net
    volumes:
      - pgdata1:/var/lib/postgresql/data

  db2:
    image: postgres:15
    container_name: db2
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=midterm-domain2
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net
    volumes:
      - pgdata2:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq

  domain-1:
    build:
      context: ./domain-1
      args:
        - JWT_SECRET=${JWT_SECRET}
        - JWT_EXPIRATION=${JWT_EXPIRATION}
    container_name: domain-1
    restart: unless-stopped
    expose:
      - "8081"
    ports:
      - "8081:8081"
    env_file:
      - .env
      - ./domain-1/.env
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db1:5432/midterm-domain1
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=123456
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=60000
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=10
      - JWT_SECRET=rSp/kisYeCdda6X8j0HA6jYCcpevXe6LQe3wHTPTC7GP5bQ5gqN15cLkAhtVomGpmT08rSqoyiD1wRxFOGhg8A==
      - JWT_EXPIRATION=86400000
      - LOGGING_LEVEL_ROOT=DEBUG
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG
      - SERVER_SERVLET_CONTEXT_PATH=/auth
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - SERVER_FORWARD_HEADERS_STRATEGY=FRAMEWORK
      - SERVER_USE_FORWARD_HEADERS=true
    depends_on:
      db1:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8081/auth/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s  # Increased start period
    labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.domain-1.rule=PathPrefix(`/auth`)"
    #   - "traefik.http.routers.domain-1.entrypoints=web"
      - "traefik.http.services.domain-1.loadbalancer.server.port=8081"
      - "traefik.http.services.domain-1.loadbalancer.passHostHeader=true"
      # Thêm middleware CORS
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowheaders=Content-Type,Authorization"
      - "traefik.http.middlewares.cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors.headers.addvaryheader=true"
    networks:
      - app-net

  domain-2:
    build:
      context: ./domain-2
      args:
        - JWT_SECRET=${JWT_SECRET}
        - JWT_EXPIRATION=${JWT_EXPIRATION}
    container_name: domain-2
    restart: unless-stopped
    expose:
      - "8082"
    ports:
      - "8082:8082"
    env_file:
      - .env
      - ./domain-2/.env
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db2:5432/midterm-domain2
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=123456
      - SERVER_SERVLET_CONTEXT_PATH=/domain2
      - SERVER_FORWARD_HEADERS_STRATEGY=framework
      - JWT_SECRET=rSp/kisYeCdda6X8j0HA6jYCcpevXe6LQe3wHTPTC7GP5bQ5gqN15cLkAhtVomGpmT08rSqoyiD1wRxFOGhg8A==
      - JWT_EXPIRATION=86400000
      - LOGGING_LEVEL_ROOT=DEBUG
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
    depends_on:
      db2:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "--max-time", "10", "http://localhost:8082/domain2/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.domain-2.rule=PathPrefix(`/domain2`)"
      - "traefik.http.routers.domain-2.entrypoints=web"
      - "traefik.http.services.domain-2.loadbalancer.server.port=8082"
      - "traefik.http.routers.domain-2.middlewares=cors@docker"
      # Thêm middleware CORS
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowheaders=Content-Type,Authorization"
      - "traefik.http.middlewares.cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors.headers.addvaryheader=true"
    networks:
      - app-net

  kitchen-domain:
    build:
      context: . 
      dockerfile: kitchen-domain/Dockerfile
      args:
        - JWT_SECRET=${JWT_SECRET:-rSp/kisYeCdda6X8j0HA6jYCcpevXe6LQe3wHTPTC7GP5bQ5gqN15cLkAhtVomGpmT08rSqoyiD1wRxFOGhg8A==}
        - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
    container_name: kitchen-domain
    restart: unless-stopped
    expose:
      - "8083"
    ports:
      - "8083:8083"
    env_file:
      - .env
      - ./kitchen-domain/.env 
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db2:5432/midterm-domain2
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=123456
      - SERVER_PORT=8083
      # - SERVER_SERVLET_CONTEXT_PATH=/kitchen
      - SERVER_FORWARD_HEADERS_STRATEGY=framework
      - JWT_SECRET=rSp/kisYeCdda6X8j0HA6jYCcpevXe6LQe3wHTPTC7GP5bQ5gqN15cLkAhtVomGpmT08rSqoyiD1wRxFOGhg8A==
      - JWT_EXPIRATION=86400000
      - LOGGING_LEVEL_ROOT=DEBUG
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      - MANAGEMENT_HEALTH_REDIS_ENABLED=false
      - MANAGEMENT_HEALTH_REDIS_CLUSTERS_ENABLED=false
      - SPRING_AUTOCONFIGURE_EXCLUDE=org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration
      - DB_HOST=db2
      - DB_PORT=5432
      - DB_NAME=midterm-domain2
    depends_on:
      db2:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      domain-2:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "--max-time", "10", "http://localhost:8083/kitchen/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-net"
      - "traefik.http.routers.kitchen-domain.rule=PathPrefix(`/kitchen`)"
      - "traefik.http.routers.kitchen-domain.entrypoints=web"
      - "traefik.http.services.kitchen-domain.loadbalancer.server.port=8083"
      # Thêm middleware CORS
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowheaders=Content-Type,Authorization"
      - "traefik.http.middlewares.cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors.headers.addvaryheader=true"
    networks:
      - app-net

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redisdata:/data

  smart-order-fe:
    build:
      context: ./smart-order-fe
      dockerfile: Dockerfile
    container_name: smart-order-fe
    restart: unless-stopped
    expose:
      - "80"
    ports:
      - "3000:80" 
    depends_on:
      domain-1:
        condition: service_healthy
      domain-2:
        condition: service_healthy
      kitchen-domain:
        condition: service_healthy
    environment:
      - API_URL=http://localhost
      - AUTH_API_PATH=/auth
      - POSTING_API_PATH=/posting
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-net"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.priority=1" 
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      # Thêm middleware CORS
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowheaders=Content-Type,Authorization"
      - "traefik.http.middlewares.cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors.headers.addvaryheader=true"
    networks:
      - app-net
    extra_hosts:
      - "domain-2:172.17.0.1" 
      - "traefik:172.17.0.1" 

networks:
  app-net:
    driver: bridge

volumes:
  pgdata1:
  pgdata2:
  rabbitmqdata:
  redisdata:


